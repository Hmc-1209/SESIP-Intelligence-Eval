1. Introduction
SESIP is based on the Common Criteria methodology ISO/IEC 15408-3, specialized for the evaluation of Connected Platforms in the context of IoT. 


2. OVERVIEW
IoT is a broad term, but always contains a product (thing) and some form of connectivity (internet). 
SESIP focuses on the "thing" side of IoT, and on the security of Connected Products based on Connected Platforms.
A Connected Platform typically includes the following components: 
    • Hardware (processing unit, memory, possibly a secure element, at least one network interface, possibly some sensors)
    • An operating system, providing a foundation to run Connected Applications on the hardwar
    • A network connectivity layer, allowing the connection of the product to backend or other products
    • Software application services offered to Connected Applications, providing an application framework to product vendors
The main assets of a Connected Platform:
    • User data (local): Privacy concerns are essential.Protections of integrity, authenticity, and confidentiality must be provided.
    • User data (authentication data): Confidentiality is required for secrets. Secondary data (such as counters) must be appropriately protected (integrity, confidentiality).
    • Data in transit (internet): Confidentiality and integrity are often essential, as are authenticity and authentication of the other party.
    • Data in transit (local): Integrity is often essential. Confidentiality is not a systematic requirement. Authenticity and authentication of the other party are less common.
    • Code, including platform code and application code: Integrity and authenticity are strong requirements. Confidentiality is optional.
    • Product identity: Integrity and unicity are required.
    • Configuration and system data: Integrity and authenticity are required.
    • Life cycle related data: Integrity is required.
The assets may be further categorized into different criticality levels that will be protected at the appropriate level in the platform (part) – in the case of a multi-assurance platform, see section 2.4.2.
2.3 Connected Product Life cycle
Some patterns can be found in most products that are significant for security:
    • Vendor provisioning is the phase during which the product is provisioned with credentials that are shared with the vendor’s backend, and that allow the product to communicate securely with the backend and to perform management operations.
    • User provisioning is the phase during which the product is provisioned with a user’s credentials and specific data that allow the product to represent that user. This phase typically concludes with the normal usage phase of the product.
    • Normal usage is supposed to be the product’s normal state, until one of the following events occurs: (1) The user applies a factory reset, which removes all user-related data and credentials, and prepares the product to be transferred to another entity (e.g. for resale, for return, or even for temporary storage). (2) The product is then ready again for user provisioning, but a user should not have the ability to return the product to an earlier life cycle phase. The user decommissions the product, before discarding it. This Terminated state is irreversible.
Some products may include an additional state related to Field return, during which specific debugging 
features may be available. All user data and credentials shall have been removed before reaching that state.
2.4 Reusability in SESIP
SESIP security requirements are defined in a way that enables the establishment of equivalence with the requirements of other schemes. After successful compatibility analysis, this allows the reuse of evaluation results between schemes.
To maintain security through the whole assembly process can be quite complex, unless all the vendors of those components (hardware and software) use a common methodology.
In order to address this, SESIP considers the following reuse contexts:
    • Reuse of evaluated platform parts in several platforms (parts)
    • Reuse of evaluated platform parts from a hosting platform (part) to another on
2.4.2 Additive Composition within SESIP
The objective of additive composition is to facilitate the evaluation of a Connected Platform by reusing previous evaluation results of platform (parts).
SESIP allows different composition scenarios:
    • Combination of previously evaluated platform parts
    • Combination of platform part(s) to be evaluated with previously evaluated platform part(s)
    • Combination of a platform to be evaluated with previously evaluated platform parts
The final IoT device can rely on the successive evaluated platform parts and reuse each evaluation result. All the supply chain actors benefit from the additive composition: from the evaluation of a hardware block, through the evaluation of intermediate modules, to an evaluated device.
Composition Evaluation Rules
Evaluation of a composition of platform parts must assess that the guidance (including objectives for the environment, user guidance, integration guidance, etc.) of each platform part is respected.
Evaluation of a composition of platform parts must assess the impact of the composition on the correct security functioning of the platform parts. 
By default, the composition can claim at most the lowest assurance level of the platform parts it is composed of. 
For instance, a Connected Platform composed of a SESIP2 platform part and a SESIP5 platform part cannot be certified at an overall level higher than SESIP2 without providing additional evidence about the SESIP2 part or about its usage by the SESIP5 platform part.
Nevertheless, in such a case, the Security Target may identify a subset of the SFRs that require higher assurance.
In that case, the Security Target can claim the assurance level of the high-assurance part, provided that the SFRs covered by the higher part are clearly identified to the reader. Using the example from the previous paragraph, the Connected Platform could claim being at SESIP2 with a SESIP5 part covering only the SFRs of the SESIP5 part.
The assurance level for such an evaluation shall be referred to as "SESIP2 with SESIP5 part(s)".
Moreover, the SESIP level of an individual platform part could also be increased once composed with another platform part providing security features with a higher assurance level; this must be demonstrated by evidences at the composition level.
2.5 Accessibility and Transparency
SESIP must also ensure that these vendors have the ability to properly leverage in their products the security features provided by evaluated platforms (parts). This is achieved mostly through the Security Target, which must become a document exploitable by developers who are proficient in security but are not evaluation specialists.
SESIP Security Targets must respect several key characteristics:
    • The security objectives are the concretization of the risk analysis informing the reader about the security features to be covered by the product. They must be described by the Security Target writer such that developers can leverage these features, and to facilitate the reuse of SESIP evidences.
    • The SESIP Security Functional Requirements (SFRs), which are the expression of the security objectives into implementation requirements, are tailored for Connected Platforms. In SESIP, each SFR covers a full security purpose by itself. This allows the Security Target users to develop an intuitive understanding of the security requirements. Note that flexibility for requirement construction is lower than when purposes are met by several SFRs; however, in a specific context where needs are predictable, such as a Connected Platform, such flexibility has been found not beneficial. SESIP pre-defines a set of such SFRs, which are detailed in Chapter 3.
    • The specification summary written by the platform evaluator must be at a sufficient level of detail to demonstrate that the SFRs are met by the specific implementation.
    • The summary description of the flaw remediation process, written by the platform (part) developer, must explain in particular how the discovery of a vulnerability and the subsequent analysis may lead to the development and distribution of a platform update or to other corrective measures.
    • Reference to user guidance must be included, along with a description of how a prospective user can access this documentation.
The SESIP Security Target and the documentation that it refers to are intended to be publicly accessible documentation, at least to prospective adopters of the platform (part); this can be refined in individual schemes, depending on the security sensitivity of the evaluated platforms (parts).
2.6 Security Self-assessment in SESIP
Security self-assessment by the developer is based on the demonstration that all security requirements are properly covered in the form of a rationale included in the SESIP Security Target.
Such a rationale must be provided for:
    • Every Security Functional Requirement claimed, describing how this requirement is covered by the implementation
    • In the case of a composition, every Security Objective for the Environment defined by a platform part, to demonstrate how this objective is met and/or define it again as a Security Objective for the platform Environment
    • The flaw remediation claim, providing a description of a compliant process
    • Each document required by the claimed Security Assurance Level, explaining how that documentation can be accessed
    • Publicly known vulnerabilities against the platform (part), providing a vulnerability review
Every rationale is based on a self-assessment by the developer that must be validated by a third-party platform evaluator. The extent of work performed by the platform evaluator depends on the selected assurance level.
2.7 Catalog of Security Features and Assurance Packages
SESIP includes a catalog of Security Functional Requirements (SFRs) as an essential part of the methodology, which allows for a consistent definition of platforms (parts) and supports a fair comparison between them. 
This catalog defines a set of security features that are essential to platforms (parts), and for which there is a shared understanding in the community. 
These security features are therefore more likely to be accessible to product vendors; they also simplify reusability and contribute to SESIP’s formalism (see previous sections).
However, it must also be ensured that the methodology provides the stability required to build and maintain a coherent certification ecosystem. 
Therefore, in the case where a feature does not match any of the SFRs defined in the SESIP catalog, a vendor may be allowed by the scheme to add product-specific SFRs, as long as they are explicitly identified as such, and are clearly separated from the SFRs already in the catalog.
Regarding Security Assurance Requirements (SARs), vendors are not allowed to claim any additional requirements in a SESIP evaluation. However, a specific certification scheme may include limited refinement of the SARs in the SESIP levels.
2.8 SESIP Profiles and Mappings
SESIP Profiles and SESIP Mappings are documents intended to support the usability of the SESIP methodology in the field.
2.8.1 SESIP Profiles
The SESIP methodology allows the definition of security profiles generic to a type of platform (part); e.g. MCU/MPU, cryptographic library, communication library, etc. These are called SESIP Profiles and are equivalent to CC Protection Profiles: A SESIP Profile document is a generic SESIP Security Target defining the SESIP requirements in terms of security features (see Chapter 3) and evaluation activities (see Chapter 4) to be addressed during the evaluation of a platform (part) of the type targeted by the profile.
SESIP Profiles are intended to be written by entities or groups needing security evaluations for a specific market and/or playing a role in such evaluations. This allows them to ensure that any platform (parts) evaluated against a SESIP Profile implements an expected minimum set of features, reaching a targeted security level; also, as the same set of features is assessed based on the same evaluation activities, this allows comparability between evaluations of different evaluated platform (parts).
Thanks to the accessibility of SESIP requirements (see section 2.5), stakeholders without specific expertise in evaluation are able to write and understand a SESIP Profile.
2.8 SESIP Mappings
As described in section 2.4.1, SESIP is intended to work with existing standards, providing them with a framework for the evaluation of their requirements. Indeed, SESIP defines security requirements (see Chapters 3 and 4) that can be claimed by developers to be addressed in SESIP evaluations. Those requirements have been expressed at a level allowing the coverage of main features of IoT Platforms. As a result, requirements of existing standards can easily be mapped to SESIP requirements.
Along with such mapping, the results of the SESIP evaluation can be reused as a demonstration of compliance to an IoT standard, confirming that the IoT standard’s security features have been correctly and efficiently implemented.
SESIP Mappings are intended to be written by entities or groups who would like to use SESIP evaluation results as the basis for the demonstration of compliance to a standard.
The benefit of the SESIP evaluation in this context is the reuse of an initial SESIP evaluation to demonstrate compliance with several standards, each standard being associated with a dedicated mapping.


3. SECURITY FUNCTIONAL REQUIREMENTS
The SFRs are described with the wording of the requirement, the "value", and the "considerations".
    • The wording of the requirement describes what must be implemented; in some requirements, the text includes fields within angle brackets (<>) to be filled with the specificities of platforms (parts).
    • The "value" section describes the value added by a platform providing this functionality, to the users, evaluators, and developers of composite IoT products and platforms.
    • The "considerations" section describes what aspects should be considered in the evaluation and certification of this SFR.
All Security Targets must include the "Verification of Platform Identity" SFR, and all must either include the "Secure Update of Platform" SFR or argue under ALC_FLR.2 why updates are not applicable.

3.1 Identification and Attestation of Platforms and Applications
Identification and attestation of applications, platforms, and platform parts allow customers, developers, and evaluators to verify that they have the evaluated product. More complex attestation allows for a wider scope of what is attested, and higher assurance on that which is attested. The SFRs in this subsection are to be used to express identification and attestation requirements.

3.1.1 Verification of Platform Identity
Requirement:
The platform provides a unique identification of the platform, including all its parts and their versions.
Value:
Users can verify that they have a secure product only if they can obtain the identifications of the product parts (application and Connected Platform). The platform is a crucial building block of that identification process.
Evaluators and developers of composites need to be able to verify the identity, too (but might require attestation for higher assurance; see section 3.1.3).
Considerations:
The ST describes the platform, thereby defining all its parts.
Developers of platform (parts) are required to keep the identification (globally) unique: All products from that developer that identify in the way the evaluated product is identified shall be the evaluated product. This functional requirement is mandatory for all platforms, to ensure that customers can verify that they have the correct platform. In case of composition, the platform identification must also cover the integrated parts.

3.1.2 Verification of Platform Instance Identity
Requirement:
The platform provides a unique identification of that specific instantiation of the platform, including all its parts.
Value:
Developers of composites may need a unique identifier for a specific instantiation of a platform.
Considerations:
Developers of platform (parts) are required to keep the individual instantiation identification (globally) unique in combination with the "Verification of Platform Identity".
A typical example of platform identity is the platform serial number.

3.1.3 Attestation of Platform Genuineness
Requirement:
The platform provides an attestation of the "Verification of Platform Identity" and "Verification of Platform Instance Identity", in a way that ensures that the platform cannot be cloned or changed without detection.
Value:
Users, developers, and evaluators can verify that they have the genuine (secure) product, not an insecure/incomplete clone. This gives more assurance to those parties and makes the genuine secure product more distinctive and valuable. Together with the "Verification of Platform Instance Identity" SFR, authentication of this platform can be shown.
Users of the platform certificates issued against this standard, such as dedicated schemes for products, can use this attestation as their way of identifying the genuine product.
Considerations:
The genuine identification is used to ensure that a given platform is a genuine instantiation of the platform and not a product posturing as one (i.e. a clone), hence the mechanism and its keys are valuable to an attacker seeking to clone the platform or otherwise misuse the developer’s brand and reputation. As the developer is potentially held accountable for clones identifying as the genuine platform, or at least suffers reputation damage for them, such an attacker goal shall be considered as part of the evaluation.

3.1.4 Secure Initialization of Platform
Requirement:
The platform ensures its integrity and authenticity during platform initialization. If the platform integrity or authenticity cannot be ensured, the platform will go to <list of controlled states>.
Value:
Users, developers, and evaluators can trust that the platform verified its integrity and authenticity at start-up, hence an operational product is running on a secure platform.
Considerations:
A platform detecting a breach of integrity or authenticity may offer "Factory Reset of Platform" and/or "Secure Update of Platform" functionality to recover a given product, or "Decommission of Platform" functionality to neutralize the product.

3.1.5 Attestation of Platform State
Requirement:
The platform provides an attestation of the state of the platform, such that it can be determined that the platform is in a known state.
Value:
Users, evaluators, and developers of composites can verify that the platform is in a known state that was part of the evaluation.
Consideration:
Implies that "Attestation of Platform Genuineness" and "Secure Initialization of Platform" are also implemented.

3.1.6 Attestation of Application Genuineness
Requirement:
The platform provides an attestation of the application, in a way that ensures that the application has not been cloned or changed without detection.
Value:
Users can determine that they have the genuine (secure) product, not an insecure/incomplete clone. This gives more assurance to the user and makes the genuine (secure) product more distinctive and valuable.
Considerations:
Implies that "Attestation of Platform Genuineness" and "Secure Initialization of Platform" are also implemented.

3.1.7 Attestation of Application State
Requirement:
The platform provides an attestation of the state of the application.
Value:
Users, evaluators, and developers of composites can verify that the application is in a specific state. This specific state could then be compared to a secure state that was part of the evaluation.
Considerations:
The attested state of the application is limited to information that is available to the platform, such as the application’s static code and configuration, and other platform-managed information, e.g. an application life cycle state.
Implies that "Attestation of Application Genuineness" and "Attestation of Platform State" are also implemented.

3.2 Product Life Cycle: Factory Reset / Install / Update / Decommission
The platform shall always maintain the Security Functional Requirements claimed, including the boot and shutdown stages.
The SFRs in this subsection are to be used to express other common life cycle steps such as secure installation, update, and decommission of the platform and application.
The confidentiality of the platform or application may be important, for example to protect intellectual property rights or because this confidentiality has been assumed during a vulnerability analysis. As these life cycle steps may happen in the field, platform and application confidentiality needs to be maintained.

3.2.1 Factory Reset of Platform
Requirement:
The platform can be reset to the state in which it exists when the product embedding the platform is delivered to the user, before any personal user data, user credentials, or user configuration is present on the platform.
Value:
The user invokes this functionality to return the product built on the platform to its initial factory state and restart the life cycle again from this point; this can be used for reselling purpose. The user’s data is guaranteed to be destroyed, independently of the application running on the platform.
Considerations:
The platform shall still be functional after the factory reset, allowing the user to re-initialize the product embedding the platform.
This reset shall destroy all data (including the data of the application) received after user delivery, such that none of this data can be compromised even when the product is also physically accessible to an attacker.
This functionality still allows storage of platform instance unique data, such as data needed for "Attestation of Platform Genuineness" and "Attestation of Platform State", allowing the platform and product to continue to be operational.
This functionality is not intended to counter attacks where an attacker has temporary physical access and then returns it to the user; those are countered by "Physical Attacker Resistance".
If the application is (partially) defective, it shall still be possible to factory reset the product and then throw the product away with the (user) data no longer recoverable in the product. Platforms with functionality from "Secure Encrypted Storage", "Residual Information Purging", or "Cryptographic KeyStore" typically will be able to fulfil this requirement more easily.
The destruction method shall be appropriate for the persistent memory technology and attack potential. See also "Residual Information Purging".

3.2.2 Secure Install of Application
Requirement:
The application can be installed in the field such that the <confidentiality,> integrity and authenticity of the application is maintained.
Value:
An application may be installed in the field, including at the final end user and at unsecured product production sites. Composite developers and evaluators can be assured that the application is not modified (or optionally: disclosed) during this installation.
Consideration:
The installation mechanism shall ensure that an application is compatible with the underlying platform in its current version before installing the application.
A platform offering this SFR should consider also offering "Secure Update of Application" as a complement to the "Secure Update of Platform", allowing the product vendor to provide flaw remediation procedures that cover the entire product.


3.2.3 Secure Update of Platform
Requirement:
The platform can be updated to a newer version in the field such that the <confidentiality,> integrity and authenticity of the platform is maintained.
Value:
Addressing security flaws, functional bugs, or improvements may require an update of the platform in the field. Composite developers and evaluators can be assured that the update mechanism itself will not enable an attack.
Considerations:
Note that absence of this functionality shall be explained in the ST under ALC_FLR.2.
The update mechanism shall counter downgrade attacks ("updating" to an older, potentially more vulnerable version). What is an "older" or "newer" version shall be defined in ALC_FLR.2.
Note also that updates of the platform shall have a (globally) unique identifier as per "Verification of Platform Identity" and may require their own (re-)evaluation and (re-)certification.

3.2.4 Secure Update of Application
Requirement:
The application can be updated to a newer version in the field such that the <confidentiality,> integrity and authenticity of the application is maintained.
Value:
Addressing security flaws, functional bugs, or improvements may require an update of the application in the field. Composite developers and evaluators can be assured that the application is not disclosed or inappropriately modified during this update.
Consideration:
The update mechanism shall counter downgrade attacks ("updating" to an older, potentially more vulnerable version). What is an "older" or "newer" version shall be defined in ALC_FLR.2.
The update mechanism shall ensure, before updating the application, that the new version of the application is compatible with the underlying platform in its current version.
A platform offering this may consider also offering "Secure Install of Application".

3.2.5 Secure Uninstall of Application
Requirement:
The application can be uninstalled in the field such that all application data <with the exception of <list of objects not destroyed>> is destroyed.
Value:
The user invokes this functionality prior to disposing of the application instance or otherwise potentially allowing an attacker physical access to the application instance. As all application data is destroyed, the application user’s data is also destroyed.
Considerations:
The uninstallation mechanism shall counter downgrade attacks (uninstall the newer application, "fresh install" to an older, potentially more vulnerable version). What is an "older" or "newer" version shall be defined in ALC_FLR.2.
The secure uninstall shall destroy all data of the application received after installation of the application. If the application developer has marked an application object as exempt from destruction during uninstallation (such as information allowing detection of a downgrade attack), then the uninstall operation shall destroy all application data not explicitly marked as exempt of uninstallation. Destruction shall be such that application data cannot be compromised even when the product is physically accessible to an attacker.
If the application is (partially) defective, it shall still be possible to uninstall the application and then throw the product away with the application (user) data no longer recoverable in the product. Platforms with functionality from "Secure Encrypted Storage", "Residual Information Purging", or "Cryptographic KeyStore" will typically be able to fulfil this requirement more easily.
The destruction method shall be appropriate for the persistent memory technology and attack potential. See also "Residual Information Purging".

3.2.6 Decommission of Platform
Requirement:
The platform can be decommissioned.
Value:
The user invokes this functionality to reach the product end-of-life state of the platform, with no way back to operational state. As all data is destroyed, the user’s data is also destroyed.
Considerations:
The platform shall not be functional after the decommissioning.
The decommissioning shall destroy all data (including the data of the application) received after production.

3.2.7 Field Return of Platform
Requirement:
The platform can be returned to the vendor without user data.
Value:
The user invokes this functionality prior to returning the product instance to its provider in case investigation is needed; e.g. malfunction observed in the field. As the user’s data is destroyed, the user can be assured that not even the vendor can access personal information.
Considerations:
The field return shall destroy all data (including the data of the application) received after user delivery, such that none of this data can be compromised even when the product is physically accessible to an attacker or the vendor.
This functionality still allows storage of platform instance unique data, such as data needed for "Attestation of Platform Genuineness" and "Attestation of Platform State", allowing the platform and product to continue to be operational.
This functionality is not intended to counter attacks where an attacker has temporary physical access and then returns it to the user; those are countered by "Physical Attacker Resistance".

3.3 Secure Communication
Typically, a product will use secure channels to communicate with a server, another Connected Product, or a cloud service. The SFRs in this section can be used to describe the platform providing such functionality to the application.
Note that the secure communication SFRs should be used when the platform provides the secure channels; if the platform provides only the cryptographic services that will be used to implement the secure channels, then the SFRs described in section 3.5, Cryptographic Functionality, can be used.

3.3.1 Secure Communication Support
Requirement:
The platform provides one or more secure communication channel(s).
The secure communication channel authenticates <list of endpoints> and protects against <list of attacks including disclosure, modification, replay, erasure> of messages between the endpoints, using <list of protocols and measures>.
Value:
The composite product developer can use the secure communication channels.
The composite evaluator/certifier knows that if the product developer uses the functionality, it is secure in the above manner.
The user, relying on the product developer and composite certifier, is assured that secure channels are used.
Considerations:
    Complete the variable parts of this SFR as follows:
    • List of endpoints: The list of endpoints to be protected using the protocols and measures listed hereafter. Endpoints can be identified by their quality, by the interface they are connected to, or by a more general category, e.g. all local endpoints. If different protocols and measures are used for different endpoints, defining different secure communication channels, then the SFR shall be iterated.
    • List of attacks: The list of security issues to avoid, typically including disclosure, modification, replay, and erasure.
    • List of protocols and measures: The list of protocols and other measures used to protect the communication channel, e.g. TLS 1.2 with TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8, or IPSEC with .... It is important to provide enough information to properly characterize the quality of the algorithms used.
If multiple different secure communication channels are provided, this SFR should be iterated.
This SFR could be sensitive to misleading claims; the fully authorized SESIP CB and evaluators shall ensure this is not misleading.

3.3.2 Secure Communication Enforcement
Requirement:
The platform ensures that communication with <list of endpoints> can only be done over the secure communication channel(s) supported by the platform using <list of protocols and measures>.
Value:
The user and composite evaluator/certifier can trust that the product is securely communicating (typically with cloud services).
Considerations:
This SFR requires that at least one iteration of the "Secure Communication Support" SFR is claimed. Complete the variable parts of this SFR as follows:
• List of endpoints: The list of endpoints identifies the secure channels the SFR applies to, as they have been defined in the corresponding "Secure Communication Support" SFRs.
• List of protocols and measures: The list of protocols and other measures used for the secure channel implementation.
This SFR implies that the platform handles all the unsecured communication layers under the secure communication channel (TCP/IP, DHCP, DNS, BT, etc.) and that the application does not have direct access to the communication layers underlying that secure channel.
This SFR could be sensitive to misleading claims; the fully authorized SESIP CB and evaluators shall ensure this is not misleading.

3.4 Extra Attacker Resistance
In our regular attacker model, attackers have only logical (network) access to the product, application, and platform during the exploitation phase of the attack, and therefore:
• do not have physical access to the specific product instance attacked, and
• are unable to run their own hostile code on the platform.
When this attacker model is not valid, adding SFRs from this section allows expression of resistance against
physical and software attackers.
Note that during the identification phase, the attacker is assumed to have physical access to his platform instance when preparing his attack.

3.4.1 Limited Physical Attacker Resistance
Requirement:
The platform detects or prevents attacks by an attacker with physical access before the attacker compromises <list of Security Functional Requirements>.
Value:
For situations where a physical attacker is in scope for a limited set of functionalities such as valuable assets warranting a physical attack, but not for all functionality. The attacker is not limited in his physical attack; the attacker is limited in the target of his attack (the limited set of SFRs).
Considerations:
All attacks enabled by physical access within the attack potential need to be considered.
With this SFR, local non-networked interfaces such as a USB port or MicroSD card reader shall now also be considered in the vulnerability analysis as accessible to the attacker (such as an "evil maid").
Attackers (mis-)using production and debug functionality such as JTAG and ISD functionality would typically be countered by disabling this functionality prior to delivery to the customer. Invasive attacks such as physical tampering or perturbation would typically be countered by detection and decommissioning the product before the detected attack succeeds. Non-invasive attacks such as side channel attacks would typically be countered by not leaking secret information such as timing, power, and EM emissions, via side channels.
The threat of replacement of the product is not covered by this SFR; it can be countered with SFRs "Verification of Platform Instance Identity" together with "Attestation of Platform Genuineness", allowing an application or user to detect replacement.

3.4.2 Physical Attacker Resistance
Requirement:
The platform detects or prevents attacks by an attacker with physical access before the attacker compromises any of the other security functional requirements.
Value:
For situations where a physical attacker is in scope, such as products that are typically used outside a secured area, or when the products store highly valuable assets warranting a physical attack.
Considerations:
All attacks enabled by physical access within the attack potential need to be considered.
With this SFR, local non-networked interfaces such as a USB port or MicroSD card reader shall now also be considered in the vulnerability analysis as accessible to the attacker (such as an "evil maid").
Attackers (mis-)using production and debug functionality such as JTAG and ISD functionality would typically be countered by disabling this functionality prior to delivery to the customer. Invasive attacks such as physical tampering or perturbation would typically be countered by detection and decommissioning the product before the detected attack succeeds. Non-invasive attacks such as side channel attacks would typically be countered by not leaking secret information, such as timing, power, and EM emissions, via side channels.
The threat of replacement of the product is not covered by this SFR; it can be countered with SFRs "Verification of Platform Instance Identity" together with "Attestation of Platform Genuineness", allowing an application or user to detect replacement.

3.4.3 Software Attacker Resistance: Isolation of Platform
Requirement:
The platform provides isolation between the application and itself, such that an attacker able to run code as an application on the platform cannot compromise the other security functional requirements.
Value:
For situations where an attacker may be able to load his own code on the platform, or the attacker might subvert any part of the application.
Considerations:
This would typically require at least an OS with kernel-user mode separation.

3.4.4 Software Attacker Resistance: Isolation of Platform Parts
Requirement:
The platform provides isolation between platform parts, such that an attacker able to run code in <list of vulnerable platform parts> cannot compromise <confidentiality and> integrity of <list of protected platform parts> nor the provision of any other Security Functional Requirements.
Value:
For situations where an attacker may be able to load his own code on inner parts of the platform.
The platform developer can separate the critical assets in different parts of the platform, and thus safeguard them from compromises of other parts of the platform.
Considerations:
Complete the variable parts of this SFR as follows:
    • The list of vulnerable platform parts defines the parts of the platform that are considered to be potentially compromised by an attacker and used to attack other parts of the platform.
    • The list of protected platform parts defines the parts of the platform that are considered to be potentially targeted by attackers running code in other compromised parts, and that are protected against such attacks.
A platform offering this functionality would typically also claim "Software Attacker Resistance: Isolation of Platform".
This would typically require a micro-kernel or a hardware-based isolation technology.

3.4.5 Software Attacker Resistance: Isolation of Application Parts
Requirement:
The platform provides isolation between parts of the application, such that an attacker able to run code as one of the <list of application parts> cannot compromise the <confidentiality and> integrity of the other application parts.
Value:
For situations where the product developer wants to separate the critical assets in its own application part (process, executable, etc.), and thus safeguard those assets from compromises by other parts of the application code that are too complex to be shown to be secure.
Considerations:
The variable part of this SFR, list of application parts, shall list the part types that may compose the application (modules, processes, applets), and between which some isolation is to be provided.
This would typically require an OS with application-application memory separation or an interpreter-based platform with similar access rules, such as Java Card.

3.5 CryptographicFunctionality
These are common cryptographic functions that a platform can provide that are useful to the developer of a composite or to a product user.
Standard CC interpretation applies for references to standards: All of the claimed parts of the specification need to be fully implemented, so precise references are encouraged. Evaluators and certifiers shall verify all aspects of the parts of standards referenced.

3.5.1 Cryptographic Operation
Requirement:
The platform provides <list of cryptographic operations> functionality with <list of algorithms> as specified in <specification> for key lengths <list of key lengths> and modes <list of modes>.
Value:
Evaluators and developers of composites can be assured of standard-compliant cryptographic functions.
Considerations:
    Complete the variable parts of this SFR as follows:
    • The list of cryptographic operations defines the operations that can be considered, typically selected from encryption, decryption, hashing, signing, and signature verification.
    • The list of algorithms provides a reference to the cryptographic algorithms used.
    • The specification references the standard in which the operation is defined (including a section or similar information if relevant).
    • The list of key lengths defines the key lengths that are supported for that cryptographic operation.
    • The list of modes defines the operational modes that are supported for that cryptographic operation.
A typical example of a fully defined SFR would be: The platform provides the application with encryption and decryption functionality as specified in NIST FIPS 197 (AES) with 256-bit keys in GCM mode.
This SFR should be iterated if more than one algorithm is provided. For the sake of clarity, it may be preferable to use a table to define the supported parameters.
The cryptographic operation shall keep the confidentiality of the secret keys against the attacker. Even with the standard attacker model, timing and padding oracle attacks shall be considered if they are within the attack potential.
Note that this SFR is for the cryptographic functionality available to the application. This SFR should not be used to only restate the crypto functionality claimed in other SFRs (such as "Secure Encrypted Storage", "Secure Communication Support", "Secure Communication Enforcement") unless that functionality is separately made available to the application.

3.5.2 Cryptographic Key Generation
Requirement:
The platform provides a way to generate cryptographic keys for use in <list of cryptographic algorithms> as specified in <specification> for key lengths <list of key lengths>.
Value:
Evaluators and developers of composites can be assured of standard-compliant cryptographic key generation.
Considerations:
    Complete the variable parts of this SFR as follows:
    • The list of cryptographic algorithms provides a reference to the algorithms used.
    • The specification references the standard in which the operation is defined (including a section or similar information if relevant).
    • The list of key lengths defines the key lengths that are supported for that cryptographic operation.
This SFR should be iterated if keys are generated for more than one algorithm. For the sake of clarity, it may
be preferable to use a table to define the supported parameters.
The specification of the key generation algorithm can be useful for use in specific product evaluation schemes. Regardless of the algorithm used, every attack within the attack potential applies: Attacks such as ROCA are always to be checked against.

3.5.3 Cryptographic KeyStore
Requirement:
The platform provides a way to store <list of assets, such as cryptographic keys and passwords> such that not even the application can compromise the <selection: confidentiality, integrity, authenticity> of this data. This data can be used for the cryptographic operations <list of operations>.
Value:
Evaluators and developers of composites can be assured that keys cannot be disclosed accidentally, provided that the keys are stored only in the KeyStore.
Considerations:
    Complete the variable parts of this SFR as follows:
    • The list of assets defines the types of assets to be protected by the KeyStore.
    • The properties confidentiality, integrity, and authenticity define the protection afforded.
    • The list of operations defines the operations that an application can perform on the assets stored in the KeyStore without having to access the assets’ values.
A software KeyStore in the platform will typically require either “Software Attacker Resistance: Isolation of Platform” in the platform or code review or automated code verification of the product.

3.5.4 Cryptographic Random Number Generation
Requirement:
The platform provides a way based on <list of entropy sources> to generate random numbers to as specified in <specification>.
Value:
Evaluators and developers of composites can be assured of standard-compliant cryptographic key generation. Random number generation can also be used for other usage of strong cryptographic numbers e.g. authentication, etc.
Considerations:
    Complete the variable parts of this SFR as follows:
    • The list of entropy sources defines how the randomness is generated from physical and computational resources.
    • The specification references the standard in which the operation is defined (including a section or similar information if relevant).
The specification of the number generation algorithm can be useful for use in specific product evaluation schemes. Regardless of the algorithm used, every attack within the attack potential applies: Weak entropy and predictability shall always be checked against.

3.6 ComplianceFunctionality
These are commonly required properties from various product domains and schemes.

3.6.1 Secure Trusted Storage
Requirement:
The platform ensures that all user data stored, except for <list of data stored in plaintext>, is protected to ensure its integrity, authenticity, and binding to the platform instance.
Value:
Evaluators and developers of composites can be assured of the integrity and authenticity of stored data.
Considerations:
    Complete the variable parts of this SFR as follows:
    • The list of data stored in plaintext lists the categories that are excluded from the secure encrypted storage, which should be used for all other data.
The mechanism used shall protect both the integrity and authenticity of stored data.
Note that if the storage must be protected against read out by physical attackers, “Physical Attacker Resistance” should be used.

3.6.2 Secure Confidential Storage
Requirement:
The platform ensures that all data stored by the application, except for <list of data stored>, is protected to ensure its confidentiality, integrity, authenticity, and binding to the platform instance.
Value:
Evaluators and developers of composites can be assured of the confidentiality, integrity, and authenticity of stored data.
Considerations:
Can be used for situations where the storage is protected by non-encryption means.

3.6.3 Secure Encrypted Storage
Requirement:
The platform ensures that all user data stored, except for <list of data stored in plaintext>, is encrypted as specified in <specification> with a platform instance unique key of key length <key length>.
Value:
Evaluators and developers of composites can be assured that (implicitly) stored data is encrypted, without further activities.
Considerations:
    Complete the variable parts of this SFR as follows:
    • The list of data stored in plaintext lists the categories that are excluded from the secure encrypted storage, which should be used for all other data.
    • The specification references the standard in which the encryption mechanism is defined (including a section or similar information if relevant).
    • The key length is the size of the key used for the encryption.
The encryption mechanism used shall protect both the confidentiality and integrity of stored data.
The key used to encrypt the data shall be generated such that compromise of the key of one product instance does not allow compromise of another product instance; moreover, the confidentiality of this key must be protected.
This may be implemented using the “Cryptographic Operation” functionality, but that SFR should only be claimed if the functionality of that SFR is directly available to the user (e.g. the application).

3.6.4 Secure Data Serialization
Requirement:
The platform ensures that all data stored outside the direct control of the platform, except for <list of data stored outside the direct control of the platform>, is protected such that the <selection: confidentiality, integrity, authenticity, binding to the platform instance, versioning> is ensured.
Value:
Evaluators and developers of composites can be assured that data can be stored outside of the platform without being modified or disclosed.
Considerations:
    Complete the variable parts of this SFR as follows:
    • The list of data stored outside of the direct control of the platform.
    • The protections ensured by the mechanism.
    If cryptographic algorithms are used, also provide:
    • The specification references the standard in which the cryptographic algorithms used for data encryption are defined (including a section or similar information if relevant).
    • The key length is the size of the keys used by the cryptographic algorithms used for data encryption. 
The key used in the encryption mechanism shall be generated such that compromise of the key of one product instance does not allow easier compromise of another product instance.
This may be implemented using the “Cryptographic Operation” functionality, but that SFR should only be claimed if the functionality of that SFR is directly available to the user (e.g. the application).
Note that if the storage must be protected against read out by physical attackers, “Physical Attacker Resistance” should be used.

3.6.5 Residual Information Purging
Requirement:
The platform ensures that <list of data>, with the exception of <list of data that is not erased automatically>, is erased using the method specified in <specification> before the memory is used by the platform or application again and before an attacker can access it.
Value:
Evaluators and developers of composites can be assured that (implicitly) stored and copied data is erased automatically, without further activities.
Considerations:
    Complete the variable parts of this SFR as follows:
    • The list of data defines the categories of data that are to be cleared automatically, which is expected to be very wide (see below).
    • The list of exceptions of data that is not erased automatically defines the categories that are not expected to be cleared automatically.
    • The specification references the standard in which the encryption mechanism is defined (including a section or similar information if relevant).
Typically, the list of data would be “all data of the application no longer used by the application”, allowing for lazy erasure happening only at reuse of the memory, not immediately at release of the memory to match common software implementations.
Attacks such as cold boot need to be considered.

3.6.6 Audit Log Generation and Storage
Requirement:
The platform generates and maintains an audit log of <list of significant security events> and allows access and analysis of these logs following a specific <access control policy>.
Value:
Evaluators, developers, and users of composites can detect attack attempts to the platform.
Considerations:
    Complete the variable parts of this SFR as follows:
    • The list of significant security events defines the events in the log, which are expected to provide a wide coverage of the platform’s possible events.
    • The access control policy defines the conditions under which the logs may be inspected, typically by specific privileged users after authentication.
“Software Attacker Resistance: Isolation of Platform” might also be claimed to support this claim.

3.6.7 Reliable Index
Requirement:
The platform implements a strictly increasing function.
Value:
This feature can be used to implement means to track versions or even time.
Considerations:
An only-increasing counter of events or timer ticks fulfills this requirement, as does a protected time measurement.

3.6.8 Secure Debugging
Requirement:
The platform only provides <list of endpoints> authenticated as specified in <specification> with debug functionality.
The platform ensures that all user data stored, with the exception of <list of exceptions>, is made unavailable. 
Value:
Developers of composites can debug their products without compromising the security of their users’ data.
Considerations:
    Complete the variable parts of this SFR as follows:
    • The list of endpoints lists the endpoints (potentially with their physical connection and the authentication data needed) allowed to set the platform in debug mode.
    • The specification references the standard in which the authentication mechanism is defined (including a section or similar information if relevant).
    • The list of exceptions lists the data that is excluded from the protection during debugging. This should not include user data that has a reasonable expectation of containing the user’s personally identifiable information.
This may be implemented using “Secure Communication Support” functionality.

3.6.9 Secure Recovery
Requirement:
The platform detects anomalies <list of anomalies> and recovers to return to a known state <list of controlled states>.
Value:
For resilience, the platform might provide a mechanism to return to a defined controlled state, such as an update or recovery state.
Considerations:
This can be a dangerous mechanism; for instance, rollback can introduce some security drawback. This needs to be considered during the assessment. Care should be taken not to restore to an inappropriate state, e.g. monotonically incrementing counters and attack counters should not be decremented.


3.6.10 Secure Backup and Restore
Requirement:
The platform ensures that user data <list of data>, with the exception of <list of exceptions>, can be backed up and restored such that the <confidentiality,> integrity and authenticity is protected.
Value:
This can be used to support IoT device standards requirements as for instance IEC 62443 CR 7.3 Control system backup.
Considerations:
If confidentiality is not claimed, the impact on other SFRs needs to be considered: Any data that can be backed up without confidentiality should be considered to be known to the attacker when analyzing the SFRs.
Care should be taken not to restore to an inappropriate state; e.g. monotonically incrementing counters and attack counters should not be decremented.

3.6.11 Generic Security Platform Feature
Requirement:
The platform provides the <security operation(s)> according to <specification(s)>. 
Value:
The platform implements a specific security feature, other than IoT generic features listed in this catalogue, and its execution shall specifically be assessed against the objective of the security feature and assured not to negatively impact the other security functionality of the platform and its data.
As an example this could be used to cover the IEC 62443 CR 3.4 requirements about “Software and information integrity”.
Considerations:
This SFR shall be used only when functionality implemented by the platform is not covered by an SFR in the catalogue already.

3.7 AccessControl
These are commonly required properties from various product domains and schemes.

3.7.1 Privileged Access Control
Requirement:
The platform allows access to <list of allowed resources/operations> only based on <list of privileges>. 
Value:
    This SFR can be used to require access control mechanisms that are not based on regular user authentication, as for instance access control based on:
    • Physical access to a push button
    • The physical/virtual address of request
    • The request context; e.g. Root/User mode, NSPE/SPE mode, user/process ID, etc.
    • The network origin; e.g. from internal or external port
Considerations:
The implementation fulfilling this feature can be common or partly common to the one fulfilling isolation requirement; e.g. ARM TrustZone implementation can be used to isolate the platform (e.g. SPE) from the application (e.g. NSPE) and perform access control based on the NSPE/SPE origin.

3.7.2 Authenticated Access Control
Requirement:
The platform allows only <list of role(s)> identified, authenticated, and authorized to allow performing of <list of allowed resources/operations>.
Value:
This SFR can be used to require authentication for restricted operations, allowing computer or human roles to allow access to restricted functionality, for example to show compliance to EN 303 645 Provision 5.1-2, 5.2-4, 5.5-4, and 5.5-5, or IEC 62443 CR 1.1 Human user identification and authentication, CR 1.3 Account management, CR 2.1 Authorization enforcement, and CR 2.12 Non-repudiation.
Considerations:
Management of the access entities assigned to roles, the roles, the roles’ authorizations and allowed operations, should also be considered an operation and included in the encoded specification. It may be useful to iterate this SFR for readability.

3.8 Availability
Security Evaluation Standard for IoT Platforms (SESIP) Methodology
These are commonly required properties from various product domains and schemes.
3.8.1 Constrained Demands on the Environment Capability
Requirement:
The platform limits its demands to its environment according to: <list of rules>. 
Value:
The platform might be in situations where the environment depends on the platform to not make undue demands on the environment to prevent denial of service attacks or overwhelm of this infrastructure, i.e. the platform being the source of an (accidental) denial of service attack on the environment.
For example in an electricity network, an attacker may try to maliciously manipulate the power demand across many devices, causing failure of system components or generating stations. This SFR can be used to ensure that the platform limits its transition speed (such as disconnecting loads once an hour at most).
Considerations:
This SFR describes the platform’s restraints to avoid being the cause of a denial of service attack on the environment. If resistance of the platform against denial of service attacks is required, use the SFR in section 3.8.2.


3.8.2 Availability Support
Requirement:
The platform ensures the availability and proper operation of <list of Security Functional Requirements> for the following situations <list of situations>.
Value:
This can be used to show resistance when the platform is under denial of service attacks, such as the IEC 62443 CR 7.1 Denial of service protection and CR 7.2 Resource management requirements.
Considerations:
All attacks within the attack potential and any additional attacker resistances are in scope.
This SFR describes the platform’s resistance to denial of service attacks. If the platform’s restraints to avoid being the cause of a denial of service attack on the environment is required, use the SFR in section 3.8.1.

4 SECURITY ASSURANCE REQUIREMENTS
